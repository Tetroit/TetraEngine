cmake_minimum_required(VERSION 4.0)

project(TetraEngine)

set(CMAKE_CXX_STANDARD 20)

#include_directories(core/pch)
#include_directories(core)
#include_directories(core/behaviours)
#include_directories(core/ecs)
#include_directories(core/utils)
#include_directories(core/behaviours)

#include_directories(deps/assimp/include)
#target_include_directories(deps/freetype/freetype/include)
#target_include_directories(deps/glfw/include)
#target_include_directories(deps/glm)

#link_directories(${CMAKE_SOURCE_DIR}/lib)

find_package(OpenGL REQUIRED)
#find_package(assimp REQUIRED)

##opengl32.lib;freetype.lib;assimp-vc143-mtd.lib;
#add_library(Assimp STATIC IMPORTED)
#set_target_properties(Assimp PROPERTIES
#        IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/lib/Debug/assimp-vc143-mtd.lib
#        INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/deps/assimp/include
#)

add_subdirectory(deps/glfw)
add_subdirectory(deps/glm)
#
#add_library(STB
#        deps/stb_image/stb_image.h
#        deps/stb_image/stb_impl.cpp)
#add_library(GLAD
#        deps/glad/include/glad/glad.h
#        deps/glad/src/glad.c)
#add_library(IMGUI
#        deps/imgui/imgui.cpp
#        deps/imgui/imgui.h
#        deps/imgui/imgui_demo.cpp
#        deps/imgui/imgui_draw.cpp
#        deps/imgui/imgui_widgets.cpp
#        deps/imgui/imgui_tables.cpp
#        deps/imgui/imgui_internal.h
#        deps/imgui/imstb_rectpack.h
#        deps/imgui/imstb_textedit.h
#        deps/imgui/imstb_truetype.h
#        deps/imgui/imconfig.h
#
#        deps/imgui/backends/imgui_impl_opengl3.cpp
#        deps/imgui/backends/imgui_impl_opengl3.h
#        deps/imgui/backends/imgui_impl_opengl3_loader.h
#        deps/imgui/backends/imgui_impl_glfw.cpp
#        deps/imgui/backends/imgui_impl_glfw.h)
#
#target_include_directories(STB PUBLIC deps/stb_image PRIVATE deps/stb_image)
#target_include_directories(GLAD PUBLIC deps/glad/include PRIVATE deps/glad/include/glad)
#target_include_directories(IMGUI PUBLIC deps/imgui PRIVATE deps/imgui)
#
include_directories(deps/assimp/include)
#include_directories(deps/freetype/freetype/include)
#
#target_link_libraries(IMGUI PRIVATE glfw)

add_executable(TetraEngine
        #core/TetraEngine.cpp
#        core/pch/tetrapc.h
#        core/pch/tetrapc.cpp
#        core/rendering/Texture2D.h
#        core/rendering/Cubemap.cpp
#        core/utils/Time.h
#        core/ImGuiManager.cpp
#        core/rendering/MeshRenderer.cpp
#        core/FreeType.cpp
#        core/FreeType.h
#        core/registry/SharedContentRegistry.h
#        core/Application.cpp
#        core/rendering/PointLight.h
#        core/utils/OBJParser.cpp
#        core/rendering/LightManager.h
#        core/rendering/Texture2D.cpp
#        core/behaviours/Bullet.h
#        core/rendering/Camera.cpp
#        core/rendering/Light.h
#        core/ConsoleManager.h
#        core/utils/Utils.h
#        core/rendering/Camera.h
#        core/ecs/Component.h
#        core/rendering/Viewport.h
#        core/rendering/Shader.cpp
#        core/rendering/Viewport.cpp
#        core/MyApplication.h
#        core/rendering/Framebuffer.h
#        core/rendering/Skybox.cpp
#        core/Core.h
#        core/ImGuiManager.h
#        core/DestroyManager.cpp
#        core/rendering/MeshRenderer.h
#        core/ecs/ComponentManager.cpp
#        core/DestroyManager.h
#        core/rendering/Shader.h
#        core/rendering/LightRenderer.h
#        core/behaviours/Enemy.h
#        core/rendering/Material.h
#        core/Behaviour.cpp
#        core/InputManager.cpp
#        core/rendering/Renderbuffer.cpp
#        core/Test.cpp
#        core/behaviours/Enemy.cpp
#        core/ecs/ComponentManager.h
#        core/rendering/PointLight.cpp
#        core/registry/SharedContentRegistry.cpp
#        core/rendering/Material.cpp
#        core/rendering/Renderbuffer.h
#        core/Test.h
#        core/rendering/Scene.cpp
#        core/behaviours/TestBehaviour.h
#        core/GameObject.cpp
#        core/rendering/Skybox.h
#        core/utils/Event.h
#        core/rendering/Texture360.h
#        core/rendering/LightManager.cpp
#        core/GLFWManager.h
#        core/utils/Time.cpp
#        core/rendering/Scene.h
#        core/rendering/Cubemap.h
#        core/InputManager.h
#        core/rendering/Texture360.cpp
#        core/Application.h
#        core/MyApplication.cpp
#        core/utils/OBJParser.h
#        core/GameObject.h
#        core/ConsoleManager.cpp
#        core/behaviours/Bullet.cpp
#        core/Behaviour.h
#        core/rendering/VertexData.cpp
#        core/Core.cpp
#        core/config.h
#        core/utils/Types.h
#        core/rendering/Light.cpp
#        core/ecs/Component.cpp
#        core/GLFWManager.cpp
#        core/rendering/LightRenderer.cpp
#        core/rendering/VertexData.h
#        core/rendering/Framebuffer.cpp
         core/tests/HelloWorld.cpp
)

#target_precompile_headers(${PROJECT_NAME} PUBLIC core/pch/tetrapc.h)

target_link_libraries(TetraEngine PRIVATE glfw glm
        ${CMAKE_CURRENT_SOURCE_DIR}/lib/Debug/assimp-vc143-mtd.lib
#        ${CMAKE_CURRENT_SOURCE_DIR}/lib/Debug/freetype.lib
)
#
#file(GLOB DLL_FILES "${CMAKE_CURRENT_SOURCE_DIR}/dll/Debug/*.dll")
#
#foreach(dll ${DLL_FILES})
#    add_custom_command(TARGET TetraEngine POST_BUILD
#            COMMAND ${CMAKE_COMMAND} -E copy_if_different
#            "${dll}"
#            $<TARGET_FILE_DIR:TetraEngine>)
#endforeach()


#message("dll will be copied to $<TARGET_FILE_DIR:${PROJECT_NAME}>")

target_compile_options(TetraEngine PRIVATE /fsanitize=address)
target_link_options(TetraEngine PRIVATE /fsanitize=address)